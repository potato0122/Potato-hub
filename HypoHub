local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "üî• Dead Rails Hub üî•",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "üîêDead Rails Key Systemüîê",
   LoadingSubtitle = "by anonymous",
   Theme = "AmberGlow", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Dead Rails Hub"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "fwPHqWj5Dw", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = false-- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "Copy and paste to get key", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Home")

local Toggle = MainTab:CreateToggle({
   Name = "Auto Aim ",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

local AIM_SNAP_RADIUS = 3
local AIM_SMOOTHNESS = 0.2

-- Function to find the nearest enemy's head within the aim radius
local function findClosestHeadToCrosshair()
    local closestHead = nil
    local smallestDistance = math.huge

    for _, enemy in pairs(Players:GetPlayers()) do
        if enemy ~= Players.LocalPlayer and enemy.Character then
            local head = enemy.Character:FindFirstChild("Head")
            
            if head then
                local headScreenPos, onScreen = Camera:WorldToScreenPoint(head.Position)
                
                if onScreen then
                    local mousePos = UserInputService:GetMouseLocation()
                    local distanceToCrosshair = (Vector2.new(headScreenPos.X, headScreenPos.Y) - mousePos).Magnitude

                    if distanceToCrosshair < AIM_SNAP_RADIUS and distanceToCrosshair < smallestDistance then
                        smallestDistance = distanceToCrosshair
                        closestHead = head
                    end
                end
            end
        end
    end

    return closestHead
end

-- Function to smoothly aim at the target head
local function aimAtTarget(targetHead)
    if targetHead and Camera then
        local direction = (targetHead.Position - Camera.CFrame.Position).unit
        local newCFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)

        -- Smoothly adjust camera
        Camera.CFrame = Camera.CFrame:Lerp(newCFrame, AIM_SMOOTHNESS)
    end
end

-- Continuously run aim assist
RunService.RenderStepped:Connect(function()
    local targetHead = findClosestHeadToCrosshair()
    if targetHead then
        aimAtTarget(targetHead)
    end
end)
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Collect Bond",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      local rs = game:GetService("RunService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Get player's position
local teleportRange = 50 -- Maximum teleport distance

-- Create a RemoteEvent if it doesn't exist
local teleportEvent = replicatedStorage:FindFirstChild("TeleportRequest")
if not teleportEvent then
    teleportEvent = Instance.new("RemoteEvent")
    teleportEvent.Name = "TeleportRequest"
    teleportEvent.Parent = replicatedStorage
end

-- Function to find the nearest "Bond" model
local function teleportToBond()
    local closestBond = nil
    local shortestDistance = math.huge

    for _, model in pairs(workspace:GetChildren()) do
        if model:IsA("Model") and model.Name == "Bond" then -- Only target "Bond" models
            local partInside = model:FindFirstChildWhichIsA("BasePart")
            if partInside then
                local distance = (partInside.Position - humanoidRootPart.Position).Magnitude
                if distance < shortestDistance and distance <= teleportRange then
                    closestBond = partInside.Position
                    shortestDistance = distance
                end
            end
        end
    end

    -- Teleport player if a "Bond" is found
    if closestBond then
        humanoidRootPart.CFrame = CFrame.new(closestBond + Vector3.new(0, 3, 0)) -- Slightly above
    end
end

-- Run auto teleport every second using RunService
rs.RenderStepped:Connect(function()
    teleportToBond()
    task.wait(1) -- Adjust teleport interval
end)
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Toggle Esp",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      local rs = game:GetService("RunService")
local stuff2find = { "Walker", "Runner", "Banker", "Ironclad", "Dynamite", "SheriffZombie", "Lab", "Outlaws", "Werewolf", "Vampire", "Wolf", "Nikola Tesla" }

function makelabel(p, txt) if p:FindFirstChild("esp") then return end

local bg = Instance.new("BillboardGui")
bg.Name = "esp"
bg.Size = UDim2.new(0, 80, 0, 20)
bg.StudsOffset = Vector3.new(0, 2.5, 0)
bg.AlwaysOnTop = true
bg.Parent = p

local label = Instance.new("TextLabel")
label.Size = UDim2.new(1, 0, 1, 0)
label.BackgroundTransparency = 1
label.Text = txt
label.TextColor3 = Color3.new(1, 1, 1)
label.TextScaled = true
label.Font = Enum.Font.Garamond
label.Parent = bg

end

function DoGlow(part, name) if part:FindFirstChild("myglow") then return end

local h = Instance.new("Highlight")
h.Name = "myglow"
h.Parent = part
h.FillTransparency = 0.7
h.OutlineTransparency = 0.2

h.FillColor = Color3.new(1, 1, 1)
h.OutlineColor = Color3.fromRGB(200, 200, 200)

makelabel(part, name)

end

function FindStuff() for i, v in pairs(workspace:GetChildren()) do pcall(function() if table.find(stuff2find, v.Name) then if v:IsA("Model") and v.PrimaryPart then DoGlow(v.PrimaryPart, v.Name) elseif v:IsA("Part") or v:IsA("MeshPart") then DoGlow(v, v.Name) end end end) end

for i, v in pairs(workspace:GetDescendants()) do
    if table.find(stuff2find, v.Name) and not v:IsDescendantOf(game.Players.LocalPlayer.Character) then
        if v:IsA("Model") and v.PrimaryPart then
            DoGlow(v.PrimaryPart, v.Name)
        elseif v:IsA("Part") then
            DoGlow(v, v.Name)
        end
    end
end

end

rs.Heartbeat:Connect(function() FindStuff() end)

print('esp loaded ok')

   end,
})

local InteTab = Window:CreateTab("Interact", nil) -- Title, Image
local InteSection = InteTab:CreateSection("Interact")

local Toggle = InteTab:CreateToggle({
   Name = "Always Day",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = InteTab:CreateToggle({
   Name = "Auto Drive",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = InteTab:CreateToggle({
   Name = "Auto Kill Aura",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local MiscTab = Window:CreateTab("Misc", nil) -- Title, Image
local MiscSection = MiscTab:CreateSection("Misc")

local Toggle = MiscTab:CreateToggle({
   Name = "Auto Fuel",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = MiscTab:CreateToggle({
   Name = "Auto Collect Corpse",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- Services
local rs = game:GetService("RunService") -- Get RunService
local player = game.Players.LocalPlayer -- Get the player

-- Settings
local collectionDistance = 10 -- Max distance to collect corpses
local sackToolName = "Sack" -- The name of the tool used for collecting

-- List of valid corpses that have a sell value
local validCorpses = {
    ["Vampire"] = true,
    ["Werewolf"] = true,
    ["Outlaw"] = true,
    ["Unicorn"] = true,
    ["Captain Prescott"] = true,
    ["Nikola Tesla"] = true
}

-- Function to get the player's Sack tool
local function getSackTool()
    if player.Backpack:FindFirstChild(sackToolName) then
        return player.Backpack:FindFirstChild(sackToolName)
    elseif player.Character and player.Character:FindFirstChild(sackToolName) then
        return player.Character:FindFirstChild(sackToolName)
    end
    return nil
end

-- Auto-collect function
local function collectCorpses()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local sack = getSackTool() -- Get Sack tool

    if humanoidRootPart and sack then
        for _, corpse in pairs(workspace:GetChildren()) do
            if validCorpses[corpse.Name] and corpse:IsA("Model") then
                local corpseRoot = corpse:FindFirstChild("HumanoidRootPart")

                if corpseRoot and (humanoidRootPart.Position - corpseRoot.Position).Magnitude <= collectionDistance then
                    print("Collecting corpse:", corpse.Name)

                    -- Move corpse inside the Sack tool
                    local collectedFolder = sack:FindFirstChild("CollectedCorpses")
                    if not collectedFolder then
                        collectedFolder = Instance.new("Folder")
                        collectedFolder.Name = "CollectedCorpses"
                        collectedFolder.Parent = sack
                    end
                    
                    corpse.Parent = collectedFolder -- Store corpse in Sack
                    corpse:SetPrimaryPartCFrame(sack.Handle.CFrame * CFrame.new(0, #collectedFolder:GetChildren(), 0))
                end
            end
        end
    end
end

-- Run auto-collect every frame
rs.Heartbeat:Connect(collectCorpses)
   end,
})

local Toggle = MiscTab:CreateToggle({
   Name = "Auto Collect Money",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- Services
local rs = game:GetService("RunService") -- Get RunService
local player = game.Players.LocalPlayer -- Get the player

-- GUI Setup
local moneyGUI = player:WaitForChild("PlayerGui"):FindFirstChild("MoneyGUI")
local moneyText = moneyGUI and moneyGUI:FindFirstChild("Money")

-- Collection Settings
local collectionDistance = 10 -- Max distance to collect money

-- Function to get the MoneyBag's value from BillboardGui
local function getMoneyBagValue(moneyBag)
    local billboard = moneyBag:FindFirstChild("BillboardGui")
    if billboard then
        local textLabel = billboard:FindFirstChild("TextLabel")
        if textLabel then
            local moneyAmount = tonumber(textLabel.Text) -- Convert text to number
            return moneyAmount or 1 -- Default to 1 if conversion fails
        end
    end
    return 1 -- Default if no GUI found
end

-- Auto-collect function
local function collectMoney()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart and moneyText then
        for _, moneyBag in pairs(workspace:GetChildren()) do
            if moneyBag:IsA("Model") and moneyBag.Name == "MoneyBag" then
                local moneyRoot = moneyBag:FindFirstChild("HumanoidRootPart")

                if moneyRoot and (humanoidRootPart.Position - moneyRoot.Position).Magnitude <= collectionDistance then
                    local currentMoney = tonumber(moneyText.Text) or 0
                    local amount = getMoneyBagValue(moneyBag) -- Get value from BillboardGui
                    moneyText.Text = tostring(currentMoney + amount) -- Update Money GUI

                    print("Collected", amount, "money from", moneyBag.Name)

                    -- Remove the money bag from the game
                    moneyBag:Destroy()
                end
            end
        end
    end
end

-- Run auto-collect every frame
rs.Heartbeat:Connect(collectMoney)
   end,
})

local Toggle = MiscTab:CreateToggle({
   Name = "Kill Aura",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local rs = game:GetService("RunService") -- Get RunService
local players = game:GetService("Players") -- Get Players service
local player = players.LocalPlayer -- Get the local player
local attackDistance = 10 -- Maximum attack range
local attackCooldown = 1 -- Cooldown between attacks (in seconds)
local lastAttackTime = 0 -- Track last attack time
local shovelToolName = "Shovel" -- The tool that activates Kill Aura
local toolEquipped = false -- Track if tool is equipped

-- List of enemy names to attack
local validEnemies = {
    ["Walker"] = true,
    ["Runner"] = true,
    ["Werewolf"] = true,
    ["Vampire"] = true,
    ["Sheriff"] = true,
    ["Ironclad Zombie"] = true,
    ["Zombie Banker"] = true,
    ["Dynamite Zombie"] = true,
    ["Zombie Soldier"] = true,
    ["Outlaws"] = true,
    ["Wolf"] = true,
    ["Skeleton"] = true
}

-- Function to attack an enemy
local function attackEnemy(enemy)
    local humanoid = enemy:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        humanoid:TakeDamage(20) -- Deals 20 damage
        print("Attacked:", enemy.Name)
    end
end

-- Kill Aura function (only works when Shovel is equipped)
local function killAura()
    if not toolEquipped then return end -- Stop if Shovel is not equipped

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart and tick() - lastAttackTime >= attackCooldown then
        lastAttackTime = tick() -- Update last attack time
        
        for _, enemy in pairs(workspace:GetChildren()) do
            if validEnemies[enemy.Name] and enemy:IsA("Model") then
                local enemyRoot = enemy:FindFirstChild("HumanoidRootPart")
                
                if enemyRoot and (humanoidRootPart.Position - enemyRoot.Position).Magnitude <= attackDistance then
                    attackEnemy(enemy)
                end
            end
        end
    end
end

-- Detect when the shovel tool is equipped
local function onToolEquipped()
    toolEquipped = true
end

-- Detect when the shovel tool is unequipped
local function onToolUnequipped()
    toolEquipped = false
end

-- Detect when the player gets the tool
local function detectTool()
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        local shovel = backpack:FindFirstChild(shovelToolName)
        if shovel then
            shovel.Equipped:Connect(onToolEquipped)
            shovel.Unequipped:Connect(onToolUnequipped)
        end
    end
end

-- Check for the tool when character spawns
player.CharacterAdded:Connect(function()
    wait(1) -- Wait for backpack to load
    detectTool()
end)

-- Run Kill Aura every frame
rs.Heartbeat:Connect(killAura)

-- Check for the tool in case the player already has it
detectTool()
   end,
})

local Toggle = MiscTab:CreateToggle({
   Name = "Bypass to end",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})