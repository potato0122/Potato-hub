local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "üî• Dead Rails Script üî• ",
   Icon = 116495829188952, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Dead Rails Hub",
   LoadingSubtitle = "By Hypolox",
   Theme = "Serenity", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Team HypoX"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Dead Rails Key",
      Subtitle= "Link in Discord Server", -- Use this to tell the user how to get a key
      FileName = "Put Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"HypoX"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

local Toggle = MainTab:CreateToggle({
   Name = "Toggle Esp",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  local rs = game:GetService("RunService")
local stuff2find = {
    "Walker", "Runner", "Werewolf", "Vampire", "Outlaw",
    "Goldbar", "Gold Bar", "Coal", "Treasury Bond", "Bond",
    "Bandage", "Snake Oil", "Snake Coil"
}

function makelabel(p, txt)
    if p:FindFirstChild("esp") then return end

    local bg = Instance.new("BillboardGui")
    bg.Name = "esp"
    bg.Size = UDim2.new(0, 80, 0, 20)
    bg.StudsOffset = Vector3.new(0, 2.5, 0)
    bg.AlwaysOnTop = true
    bg.Parent = p

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = txt
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Font = Enum.Font.Garamond
    label.Parent = bg
end

function DoGlow(part, name)
    if part:FindFirstChild("myglow") then 
        return 
    end

    local h = Instance.new("Highlight")
    h.Name = "myglow"
    h.Parent = part
    h.FillTransparency = 0.7
    h.OutlineTransparency = 0.2

    h.FillColor = Color3.new(1, 1, 1)
    h.OutlineColor = Color3.fromRGB(200, 200, 200)

    makelabel(part, name)
end

function FindStuff()
    for i, v in pairs(workspace:GetChildren()) do
        pcall(function()
            if table.find(stuff2find, v.Name) then
                if v:IsA("Model") and v.PrimaryPart then
                    DoGlow(v.PrimaryPart, v.Name)
                elseif v:IsA("Part") or v:IsA("MeshPart") then
                    DoGlow(v, v.Name)
                end
            end
        end)
    end

    for i, v in pairs(workspace:GetDescendants()) do
        if table.find(stuff2find, v.Name) and not v:IsDescendantOf(game.Players.LocalPlayer.Character) then
            if v:IsA("Model") and v.PrimaryPart then
                DoGlow(v.PrimaryPart, v.Name)
            elseif v:IsA("Part") then
                DoGlow(v, v.Name)
            end
        end
    end
end

rs.Heartbeat:Connect(function()
    FindStuff()
end)

print('esp loaded ok')
   end,
})

local MainToggle = Tab:CreateToggle({
   Name = "Auto Collect Bond",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Get player's position
local teleportRange = 50  -- Maximum distance to teleport (adjust as needed)

-- Function to teleport player to the nearest "Bond" model
local function teleportToBond()
    local closestBond = nil
    local shortestDistance = math.huge

    for _, model in pairs(workspace:GetChildren()) do
        if model:IsA("Model") and model.Name == "Bond" then -- Only target "Bond" models
            local partInside = model:FindFirstChildWhichIsA("BasePart") -- Find the first part inside

            if partInside then
                local distance = (partInside.Position - humanoidRootPart.Position).Magnitude
                if distance < shortestDistance and distance <= teleportRange then
                    closestBond = partInside.Position
                    shortestDistance = distance
                end
            end
        end
    end

    -- Teleport player to the closest "Bond" model
    if closestBond then
        humanoidRootPart.CFrame = CFrame.new(closestBond + Vector3.new(0, 3, 0)) -- Teleport slightly above the bond
    end
end

-- Run Auto Teleport every second
while true do
    teleportToBond()
    task.wait(1) -- Adjust teleport interval
end
   end,
})

local MainToggle = Tab:CreateToggle({
   Name = "Auto Aim",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local AIM_RANGE = 1000 -- Maximum detection range
local AIM_SMOOTHNESS = 0.1 -- Lower is faster

-- Function to find the nearest enemy's head
local function getNearestTarget()
    local closestTarget = nil
    local shortestDistance = AIM_RANGE

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local distance = (head.Position - Camera.CFrame.Position).Magnitude

            if distance < shortestDistance then
                closestTarget = head
                shortestDistance = distance
            end
        end
    end

    return closestTarget
end

-- Function to aim at a target
local function aimAtTarget(target)
    if target then
        local targetPosition = target.Position
        local newCFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
        Camera.CFrame = Camera.CFrame:Lerp(newCFrame, AIM_SMOOTHNESS)
    end
end

-- When the player clicks, aim at the nearest enemy
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessed then
        local target = getNearestTarget()
        if target then
            aimAtTarget(target)
        end
    end
end)
   end,
})